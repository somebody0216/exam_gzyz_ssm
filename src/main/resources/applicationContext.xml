<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--开启扫描包路径，由Spring接管扫描到的类（注解注入）-->
    <context:component-scan base-package="gzyz.Allmode">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--读取jdbc.properties-->
    <context:property-placeholder ignore-unresolvable="true"
                                  location="classpath:redis.properties,classpath:jdbc.properties"/>


    <!--设置redis连接池-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <!-- 最大连接数 -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!-- 每次释放连接的最大数目 -->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!-- 释放连接的扫描间隔（毫秒） -->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!-- 连接最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.testOnReturn}" />
        <!-- 在空闲时检查有效性, 默认false -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
        <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" />
    </bean>




    <bean id="redisFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.host}"
          p:port="${redis.port}"
          p:password="${redis.password}"
          p:pool-config-ref="poolConfig"
          p:timeout="100000" p:database="6"/>





    <!--    代码方  调用redisTemplate即可-->
    <bean id="redisTemplate"
          class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="redisFactory" />
        <!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <property name="keySerializer">
            <!--对key的默认序列化器。默认值是StringSerializer-->
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--是对value的默认序列化器，默认值是取自DefaultSerializer的JdkSerializationRedisSerializer。-->
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>



        <!--存储Map时key需要的序列化配置-->
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--存储Map时value需要的序列化配置-->
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>


















    <!-- 配置druid数据源 -->
    <bean id="pooledDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
<!--    <bean name="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
<!--          init-method="init" destroy-method="close">-->
<!--        &lt;!&ndash; 数据库连接基础信息 &ndash;&gt;-->
<!--        <property name="driverClassName" value="${jdbc.driver}"/>-->
<!--        <property name="url" value="${jdbc.url}"/>-->
<!--        <property name="username" value="${jdbc.username}"/>-->
<!--        <property name="password" value="${jdbc.password}"/>-->
<!--        &lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
<!--        <property name="initialSize" value="50" />-->
<!--        &lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
<!--        <property name="maxActive" value="200" />-->
<!--        &lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
<!--        <property name="minIdle" value="5" />-->
<!--        &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
<!--        <property name="maxWait" value="100" />-->
<!--        &lt;!&ndash; 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 &ndash;&gt;-->
<!--        <property name="testWhileIdle" value="true" />-->
<!--        &lt;!&ndash; 申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。 &ndash;&gt;-->
<!--        <property name="testOnBorrow" value="false" />-->
<!--        &lt;!&ndash; 归还连接时执行validationQuery检测连接是否有效，配置true会降低性能 &ndash;&gt;-->
<!--        <property name="testOnReturn" value="false" />-->

<!--        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
<!--        <property name="timeBetweenEvictionRunsMillis" value="60000" />-->
<!--        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
<!--        <property name="minEvictableIdleTimeMillis" value="25200000" />-->

<!--        &lt;!&ndash; 对于长时间不使用的连接强制关闭 &ndash;&gt;-->
<!--        <property name="removeAbandoned" value="true" />-->
<!--        &lt;!&ndash; 关闭超过30分钟的空闲连接，1800秒，也就是30分钟 &ndash;&gt;-->
<!--        <property name="removeAbandonedTimeout" value="180" />-->

<!--        &lt;!&ndash; 监控数据库 &ndash;&gt;-->
<!--        <property name="filters" value="stat,wall" />-->
<!--    </bean>-->
    <!-- Mybatis setting配置-->
    <bean id="setting" class="org.apache.ibatis.session.Configuration">
        <property name="mapUnderscoreToCamelCase" value="true"/>
    </bean>
    <!--  Spring 接管sqlSessionFactory  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        表示连接数据库所需信息-->
        <property name="dataSource" ref="pooledDataSource"/>
<!--        它表示我们的Mapper文件存放的位置-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
<!--        它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。-->
        <property name="typeAliasesPackage" value="gzyz.Allmode.pojo"/>
<!--        表示加载其他配置信息，比如日志，分页等等-->
        <property name="configuration" ref="setting"/>

<!--        &lt;!&ndash;配置分页插件&ndash;&gt;-->
<!--        <property name="plugins">-->
<!--            <array>-->
<!--                <bean class="com.github.pagehelper.PageInterceptor"></bean>-->
<!--            </array>-->
<!--        </property>-->
        <!--配置PageHelper-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            offsetAsPageNum=true
                            rowBoundsWithCount=true
                            pageSizeZero=true
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!--因为Spring接管整个工程，对整个工程具有扫描权限，mybatis 定位mapper代理接口，
        Spring将dao层的扫描事宜转交给Mybatis
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="gzyz.Allmode.dao"/>
        <!--        名称引用  value-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!--配置druid监控spring jdbc -->
<!--    <bean id="druid-stat-interceptor"-->
<!--          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />-->

<!--    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"-->
<!--          scope="prototype">-->
<!--        <property name="patterns">-->
<!--            <list>-->
<!--                &lt;!&ndash;需要扫描代码的包&ndash;&gt;-->
<!--                <value>gzyz.Allmode.controller.*</value>-->
<!--                <value>gzyz.Allmode.service.*</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <aop:config proxy-target-class="true">-->
<!--        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>-->
<!--    </aop:config>-->

<!--    &lt;!&ndash;监控数据库druid&ndash;&gt;-->
<!--    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">-->
<!--        <property name="slowSqlMillis" value="3000" />-->
<!--        &lt;!&ndash;记录sql&ndash;&gt;-->
<!--        <property name="logSlowSql" value="true" />-->
<!--        &lt;!&ndash;记录sql的时候可以合并&ndash;&gt;-->
<!--        <property name="mergeSql" value="true" />-->
<!--    </bean>-->

<!--    &lt;!&ndash;防火墙过滤&ndash;&gt;-->
<!--    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">-->
<!--        <property name="dbType" value="mysql" />-->
<!--    </bean>-->


    <!--AOP配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* gzyz.Allmode.service.Impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
</beans>